from PIL import Image
from util import Rectangle, rectangles_collided

class ImageRectangle(Rectangle):
    def __init__(self, x, y, width, height, counter, pos_x, pos_y, offset_x, offset_y):
        super().__init__(x=x, y=y, width=width, height=height, counter=counter, pos_x=pos_x, pos_y=pos_y)
        self.offset_x = offset_x
        self.offset_y = offset_y

# Max image size
MAX_WIDTH = 256
MAX_HEIGHT = 256

VRAM_COORDINATES = (448, 0, 0, 480)

def generate_png_txt(image_name, vram_coordinates, bpp):
    with open(image_name, "w") as file:
        texture_x, texture_y, palette_x, palette_y = vram_coordinates
        file.write(f"{texture_x} {texture_y} {palette_x} {palette_y} {bpp}")
        file.write("\n\n")
        file.write("Generated by PSXFunkinAtlasSet")

class ImageHandler:
    def __init__(self, image_name : str, bpp : int) -> None:
        self.sprite_coordinates: list[Rectangle] = []
        self.organized_sprites:  list[Rectangle] = []

        self.image_name = image_name
        self.spritesheet = None
        self.bpp = bpp

    def load(self, path: str) -> None:
        """Load a PNG file to the spritesheet member."""
        self.spritesheet = Image.open(path)
        print(f"Loading {path}...")
        print("Loaded!")

        if self.spritesheet.mode == "P":
            print(f"Warning: Spritesheet is indexed; converting to RGBA")
            self.spritesheet = self.spritesheet.convert(mode="RGBA")

    def get_sprites_coordinates(self, xml_attributes: list[Rectangle]):
        """Generate a list of non empty space sprite coordinates from the XML list."""
        for attribute in xml_attributes:
            sprite = self._crop_spritesheet(attribute)
            adjusted_sprite = self._remove_empty_space_from_sprite(sprite, attribute)
            self.sprite_coordinates.append(adjusted_sprite)

    def organize_sprites_positions(self):
        """Organize sprite positions for efficient packing."""
        current_pos_x = 0
        current_pos_y = 0
        current_counter = 0

        for i in self.sprite_coordinates:
            sprite_rect = ImageRectangle(
                x=i.x,
                y=i.y,
                width=i.width,
                height=i.height,
                counter=current_counter,
                pos_x=current_pos_x,
                pos_y=current_pos_y,
                offset_x=i.pos_x,
                offset_y=i.pos_y
            )

            if sprite_rect.pos_x + sprite_rect.width > MAX_WIDTH - 1:
                sprite_rect.pos_x = 0
                sprite_rect.pos_y = 0

            while any(rect.counter == sprite_rect.counter and rectangles_collided(sprite_rect, rect) for rect in self.organized_sprites):
                sprite_rect.pos_y += 1

            if sprite_rect.pos_y + sprite_rect.height > MAX_HEIGHT - 1:
                sprite_rect.pos_x = sprite_rect.pos_y = 0
                sprite_rect.counter += 1

            self.organized_sprites.append(sprite_rect)

            current_pos_x = sprite_rect.pos_x
            current_pos_y = sprite_rect.pos_y
            current_counter = sprite_rect.counter

            current_pos_x += sprite_rect.width + 1
            current_pos_y = 0

    def pack_sprites(self):
        """Pack the sprites into images."""
        current_counter = 0
        current_image = Image.new("RGBA", (MAX_WIDTH, MAX_HEIGHT))

        for sprite in self.organized_sprites:
            image_name = f"{self.image_name}{str(current_counter)}.png"
            sprite_image = self._crop_spritesheet(sprite)

            if current_counter != sprite.counter:
                current_image = self._save_image(current_image, image_name)
                current_counter = sprite.counter

            # Check if this is the last sprite
            if sprite == self.organized_sprites[-1]:
                image_name = f"{self.image_name}{str(current_counter)}.png"
                current_image.paste(sprite_image, (sprite.pos_x, sprite.pos_y))
                current_image = self._save_image(current_image, image_name)

            else:
                current_image.paste(sprite_image, (sprite.pos_x, sprite.pos_y))

    def _crop_spritesheet(self, sprite_rect : Rectangle):
        if self.spritesheet is None:
            raise TypeError("Failed to crop spritesheet")

        return self.spritesheet.crop((sprite_rect.x, sprite_rect.y, sprite_rect.width + sprite_rect.x, sprite_rect.height + sprite_rect.y))

    def _remove_empty_space_from_sprite(self, sprite_image, sprite_rect: Rectangle) -> Rectangle:
        """Remove empty space from the given sprite."""
        if sprite_image.getbbox() is None:
            raise TypeError("Failed to pack sprites; check for empty sprite spaces or correct XML scale")

        bbox = sprite_image.getbbox()

        adjusted_sprite = Rectangle(
            x=sprite_rect.x + bbox[0],
            y=sprite_rect.y + bbox[1],
            width=bbox[2] - bbox[0],
            height=bbox[3] - bbox[1],
            pos_x=sprite_rect.pos_x - bbox[0],
            pos_y=sprite_rect.pos_y - bbox[1]
        )

        return adjusted_sprite

    def _set_new_image_size_based_on_bpp(self, image_size : tuple, bpp : int) -> tuple:
        """Set new pillow image size based on the bpp"""
        if image_size is None:
             raise TypeError("Failed to set image size")

        # For PlayStation images, the width requirements depend on the bits per pixel (bpp). 
        # While in height it don't matter, I'm making it multiples of 2 cuz yes lol.
        width_multiple = 2 if bpp == 8 else 4
        height_multiple = 2

        new_width =  image_size[2] + (width_multiple  - image_size[2] % width_multiple)
        new_height = image_size[3] + (height_multiple - image_size[3] % height_multiple)

        return (0, 0, new_width, new_height)

    def _save_image(self, image, image_name):
        """Save the image and set a new image size to work fine in the playstation"""
        image = image.crop(self._set_new_image_size_based_on_bpp(image.getbbox(), self.bpp))
        image.save(image_name)
        generate_png_txt(image_name + ".txt", VRAM_COORDINATES, self.bpp)
        print(f"Packing sprite: {image_name}")
        return Image.new("RGBA", (MAX_WIDTH, MAX_HEIGHT))